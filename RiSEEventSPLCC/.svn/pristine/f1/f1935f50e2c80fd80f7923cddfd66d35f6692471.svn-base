//#if ${AssignmentChairindication} == "T" or ${AssignmentPreferenceindication} == "T" or ${Assignmentautomatic} == "T"
package rise.splcc.ui2;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import rise.splcc.data.Assignment;
import rise.splcc.data.Author;
import rise.splcc.data.Reviewer;
import rise.splcc.data.Submission;
import rise.splcc.data.SubmissionAuthor;
import rise.splcc.exception.AssignmentAlreadyInsertedException;
import rise.splcc.exception.AssignmentNotFoundException;
import rise.splcc.exception.AuthorAlreadyInsertedException;
import rise.splcc.exception.AuthorNotFoundException;
import rise.splcc.exception.RepositoryException;
import rise.splcc.exception.ReviewerAlreadyInsertedException;
import rise.splcc.exception.ReviewerNotFoundException;
import rise.splcc.exception.SubmissionAlreadyInsertedException;
import rise.splcc.exception.SubmissionNotFoundException;
import rise.splcc.table.AssignmentTableModel;

public class AssignmentManagementScreenP extends JInternalFrame {

	
	private static AssignmentManagementScreenP instanceAssignmentManagementScreenP;
	private JPanel contentPane;
	private JTable table;
	
	private JButton btnBack;
	private JTextField textFieldReviewerId;
	private JTextField textFieldReviewId;
	private JTextField textFieldSubmissionId;
	private JTextField textFieldDate;
	
	public static AssignmentManagementScreenP getInstanceAssignmentManagementScreenP() {
		if (instanceAssignmentManagementScreenP == null) {
			AssignmentManagementScreenP.instanceAssignmentManagementScreenP = new AssignmentManagementScreenP();
		}
		return AssignmentManagementScreenP.instanceAssignmentManagementScreenP;
	}
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					AssignmentManagementScreenP frame = new AssignmentManagementScreenP();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public AssignmentManagementScreenP() {
		setTitle("Assignment Management");
		
		int inset = 30;
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		setBounds(inset, inset, 736,480);
		
		setMaximizable(true);
		setClosable(true);
		setIconifiable(true);
		
		InsertButtonAction insertAction = new InsertButtonAction(); 
		RemoveButtonAction removeAction = new RemoveButtonAction(); 
		SelectButtonAction selectAction = new SelectButtonAction(); 
		CleanButtonAction cleanAction = new CleanButtonAction();
		BackButtonAction backAction = new BackButtonAction();
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 728, 480);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setLayout(null);
		panel.setBounds(147, 17, 413, 72);
		contentPane.add(panel);
		
		JLabel label = new JLabel("");
		label.setBounds(6, 6, 399, 60);
		ImageIcon image = new ImageIcon(getClass().getResource("/images/riseLabs.png"));
		Image imag = image.getImage().getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
		label.setIcon(new ImageIcon(imag));
		panel.add(label);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBounds(6, 97, 680, 164);
		contentPane.add(panel_1);
		panel_1.setLayout(null);
		
		JLabel lblReviewerId = new JLabel("Reviewer Id:");
		lblReviewerId.setBounds(6, 18, 81, 16);
		panel_1.add(lblReviewerId);
		
		textFieldReviewerId = new JTextField();
		textFieldReviewerId.setBounds(86, 12, 134, 28);
		panel_1.add(textFieldReviewerId);
		textFieldReviewerId.setColumns(10);
		
		JLabel lblReviewId = new JLabel("Review Id:");
		lblReviewId.setBounds(231, 18, 77, 16);
		panel_1.add(lblReviewId);
		
		textFieldReviewId = new JTextField();
		textFieldReviewId.setBounds(297, 12, 134, 28);
		panel_1.add(textFieldReviewId);
		textFieldReviewId.setColumns(10);
		
		JLabel lblSubmissionId = new JLabel("Submission Id:");
		lblSubmissionId.setBounds(443, 18, 93, 16);
		panel_1.add(lblSubmissionId);
		
		textFieldSubmissionId = new JTextField();
		textFieldSubmissionId.setBounds(540, 12, 134, 28);
		panel_1.add(textFieldSubmissionId);
		textFieldSubmissionId.setColumns(10);
		
		JLabel lblDate = new JLabel("Date:");
		lblDate.setBounds(6, 60, 61, 16);
		panel_1.add(lblDate);
		
		textFieldDate = new JTextField();
		textFieldDate.setBounds(47, 54, 134, 28);
		panel_1.add(textFieldDate);
		textFieldDate.setColumns(10);
		
		
		
		JPanel panel_2 = new JPanel();
		panel_2.setBounds(6, 309, 716, 143);
		contentPane.add(panel_2);
		panel_2.setLayout(null);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(6, 6, 689, 118);
		panel_2.add(scrollPane);
		
		table = new JTable();
		scrollPane.setViewportView(table);
		
		JButton btnInsert = new JButton("Insert");
		btnInsert.setBounds(6, 273, 117, 29);
		contentPane.add(btnInsert);
		
		JButton btnRemove = new JButton("Remove");
		btnRemove.setBounds(127, 273, 117, 29);
		contentPane.add(btnRemove);
		
		JButton btnUpdate = new JButton("Update");
		btnUpdate.setBounds(248, 273, 117, 29);
		contentPane.add(btnUpdate);
		
		JButton btnSelect = new JButton("Select");
		btnSelect.setBounds(377, 273, 117, 29);
		contentPane.add(btnSelect);
		
		JButton btnClean = new JButton("Clean");
		btnClean.setBounds(494, 273, 117, 29);
		contentPane.add(btnClean);
		
		btnBack = new JButton("Back");
		btnBack.setBounds(605, 273, 117, 29);
		contentPane.add(btnBack);
		
		//PASSO 2
		btnInsert.addActionListener(insertAction);
		btnRemove.addActionListener(removeAction);
		btnSelect.addActionListener(selectAction);
		btnClean.addActionListener(cleanAction);
		btnBack.addActionListener(backAction);
		
		populateTable();
		
	}
	
	private void populateTable(){
		
		try {
			AssignmentTableModel model;
			model = new AssignmentTableModel(RiSEEventMainScreenP.facade.getAssignments());	
			table.setModel(model);
		} catch (RepositoryException e) {
			e.printStackTrace();
		}
		
	}
	
	private class BackButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			dispose();
			AssignmentManagementScreenP.instanceAssignmentManagementScreenP = null;
		}
	}
	
	private class CleanButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			
			cleanFields();
		}
	}
	
	private void cleanFields(){
		textFieldReviewerId.setText("");
		textFieldReviewId.setText("");
		textFieldSubmissionId.setText("");
		textFieldDate.setText("");
	}
	
	private class InsertButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			Assignment assignment = null;
			
			String idreview = textFieldReviewId.getText();
			String idsubmission = textFieldSubmissionId.getText();
			String iduser = textFieldReviewerId.getText();
			String date = textFieldDate.getText();
			
			
			if (idreview.equals("") || iduser.equals("") || idsubmission.equals("")) {
				JOptionPane.showMessageDialog(getContentPane(),
						"NÃ£o pode haver campo vazio.", "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				return;
			}
				try {
					Author author = new Author();
					assignment = new Assignment();
					assignment.setDate(date);
					assignment.setIdReview(Integer.parseInt(idreview));
					assignment.setIdReviewSubmission(Integer.parseInt(idsubmission));
					assignment.setIdReviwerUser(Integer.parseInt(iduser));
					
					Submission submission = RiSEEventMainScreenP.facade.searchSubmission(assignment.getIdReviewSubmission());
					Reviewer reviewer = RiSEEventMainScreenP.facade.searchReviewer(assignment.getIdReviwerUser());
					Assignment assignment2 = new Assignment(); 
					
					List<SubmissionAuthor> submissionAuthor = new ArrayList<SubmissionAuthor>();
					submissionAuthor = RiSEEventMainScreenP.facade.getSubmissionAuthors();
					
					for(SubmissionAuthor sa : submissionAuthor){
						if(sa.getIdSubmission() == submission.getIdSubmission()){
							author = RiSEEventMainScreenP.facade.searchAuthor(sa.getIdAuthor());
						}
					}
					
					
					boolean resultAutomaticConflict = assignment2.automaticInterestConflict(author, reviewer);
					
					if(resultAutomaticConflict == true){
						JOptionPane.showMessageDialog(getContentPane(),
								"Essa atribuicao nao pode ser feita por conflito de interesses", "Erro",
								JOptionPane.INFORMATION_MESSAGE);
					}else{
						RiSEEventMainScreenP.facade.insertAssignment(assignment);
					}

				} catch (AssignmentAlreadyInsertedException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				} catch (RepositoryException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				} catch (SubmissionNotFoundException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				} catch (SubmissionAlreadyInsertedException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				} catch (ReviewerNotFoundException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				} catch (ReviewerAlreadyInsertedException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				} catch (AuthorNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} catch (AuthorAlreadyInsertedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}
	
	private class RemoveButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			Assignment assignment = new Assignment();
			assignment.setIdReviwerUser(Integer.valueOf(textFieldReviewerId.getText()));
			assignment.setIdReview(Integer.valueOf(textFieldReviewId.getText()));
			assignment.setIdReviewSubmission(Integer.valueOf(textFieldSubmissionId.getText()));
			
			try {
				if (RiSEEventMainScreenP.facade.searchAssignment(assignment) == null){
					JOptionPane.showMessageDialog(getContentPane(),
							"Assignment nÃ£o existe.", "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					return;
				}else{
					RiSEEventMainScreenP.facade.removeAssignment(assignment);
					JOptionPane.showMessageDialog(getContentPane(), "RemoÃ§Ã£o realizada com sucesso!!","RemoÃ§Ã£o",JOptionPane.INFORMATION_MESSAGE);
				}
			} catch (HeadlessException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (AssignmentNotFoundException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (RepositoryException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (AssignmentAlreadyInsertedException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			}
				
		}
	}
	
	private class SelectButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			int rowIndex = table.getSelectedRow();
			Assignment assignment = null;

			try {
				assignment=  new AssignmentTableModel(RiSEEventMainScreenP.facade.getAssignments()).get(rowIndex);
			
				textFieldReviewerId.setText(String.valueOf(assignment.getIdReviwerUser()));
				textFieldReviewId.setText(String.valueOf(assignment.getIdReview()));
				textFieldSubmissionId.setText(String.valueOf(assignment.getIdReviewSubmission()));
				textFieldDate.setText(assignment.getDate());
			
			} catch (RepositoryException ex) {
				JOptionPane.showMessageDialog(getContentPane(),
						ex.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				ex.printStackTrace();
			}
		}
	}
}
//#endif