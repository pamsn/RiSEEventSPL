//#if ${User} == "T"
package rise.splcc.ui2;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import javax.swing.border.EmptyBorder;

import rise.splcc.data.Activity;
import rise.splcc.data.Event;
import rise.splcc.data.Organizer;
import rise.splcc.data.Reviewer;
import rise.splcc.data.Speaker;
import rise.splcc.data.User;
import rise.splcc.data.User.TypeUser;
import rise.splcc.exception.OrganizerAlreadyInsertedException;
import rise.splcc.exception.OrganizerNotFoundException;
import rise.splcc.exception.RepositoryException;
import rise.splcc.exception.ReviewerAlreadyInsertedException;
import rise.splcc.exception.ReviewerNotFoundException;
import rise.splcc.exception.SpeakerAlreadyInsertedException;
import rise.splcc.exception.SpeakerNotFoundException;
import rise.splcc.exception.UserAlreadyInsertedException;
import rise.splcc.exception.UserNotFoundException;
import rise.splcc.table.OrganizerTableModel;
import rise.splcc.table.ReviewerTableModel;
import rise.splcc.table.SpeakerTableModel;
import rise.splcc.table.UserTableModel;

public class UserManagementScreenP extends JInternalFrame {

	private JPanel contentPane;
	private JTextField textFieldUserId;
	private JTextField textFieldPassword;
	private JTextField textFieldUserName;
	private JTextField textFieldUserEmail;
	private JTable table;
	private JScrollPane scrollPane;
	private JTable tableOrganizer;
	private JTable tableReviewer;
	private JTable tableSpeaker;;
	
	
	JComboBox<String> comboBox;
	
	JButton btnInsert;
	JButton btnRemove;
	JButton btnUpdate;
	JButton btnSelection;
	JButton btnClean;
	JButton btnBack;
	JRadioButton rdbtnOrganizer;
	JRadioButton rdbtnReviewer;
	JRadioButton rdbtnUser;
	JRadioButton rdbtnSpeaker;
	JLabel lblBiography;
	JLabel lblKnowledgeArea;
	ButtonGroup group;
	

	 private static UserManagementScreenP instanceUserManagementScreenP;
	 private JTextField textFieldKnowwledgeArea;
	 private JTextField textFieldBiography;
	  JLabel lblEvent;
	  JLabel lblActivity;
	 JComboBox<String> comboBoxEvent;
	 JComboBox<String> comboBoxActivity;
	 private JLabel lblFiliation;
	 private JTextField textFieldFiliation;
		
	 public static UserManagementScreenP getInstanceUserManagementScreenP() {
		 if (instanceUserManagementScreenP == null) {
			 UserManagementScreenP.instanceUserManagementScreenP = new UserManagementScreenP();
		 }
		 return UserManagementScreenP.instanceUserManagementScreenP;
	 } 
	 
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					UserManagementScreenP frame = new UserManagementScreenP();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public UserManagementScreenP() {
		
		setTitle("User Management");
		
		int inset = 30;
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		setBounds(inset, inset, 736,
				480);
		
		setMaximizable(true);
		setClosable(true);
		//setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		setIconifiable(true);
		
		//setBounds(100, 100, 877, 548);
		//PASSO 1
		InsertButtonAction insertAction = new InsertButtonAction(); 
		RemoveButtonAction removeAction = new RemoveButtonAction(); 
		UpdateButtonAction updateAction = new UpdateButtonAction();
		SelectButtonAction selectAction = new SelectButtonAction(); 
		CleanButtonAction cleanAction = new CleanButtonAction();
		GroupRadioButtonAction groupRadioButtonAction = new GroupRadioButtonAction();
		SelectComboEventAction selectComboEventAction = new SelectComboEventAction();

		BackButtonAction backAction = new BackButtonAction(); 

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 915, 553);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JPanel panel = new JPanel();
		panel.setBounds(220, 18, 392, 68);
		contentPane.add(panel);
		panel.setLayout(null);

		JLabel lblImage = new JLabel("");
		lblImage.setBounds(6, 6, 380, 56);
		ImageIcon image = new ImageIcon(getClass().getResource("/images/riseLabs.png"));
		//ImageIcon image = new ImageIcon("/Users/pamsn/Dropbox/00-Doutorado/WorkspaceProjetoSPL/SPLCC/src/images/riseLabs.png");
		Image imag = image.getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
		lblImage.setIcon(new ImageIcon(imag));
		panel.add(lblImage);

		JPanel panel_1 = new JPanel();
		panel_1.setBounds(6, 99, 829, 189);
		contentPane.add(panel_1);
		panel_1.setLayout(null);

		JLabel lblUserId = new JLabel("User Id:");
		lblUserId.setBounds(6, 19, 61, 16);
		panel_1.add(lblUserId);

		textFieldUserId = new JTextField();
		textFieldUserId.setBounds(68, 16, 102, 22);
		panel_1.add(textFieldUserId);
		textFieldUserId.setColumns(10);

		JLabel lblPassword = new JLabel("Password:");
		lblPassword.setBounds(182, 19, 79, 16);
		panel_1.add(lblPassword);

		textFieldPassword = new JTextField();
		textFieldPassword.setBounds(252, 13, 134, 28);
		panel_1.add(textFieldPassword);
		textFieldPassword.setColumns(10);

		JLabel lblName = new JLabel("Name:");
		lblName.setBounds(6, 59, 61, 16);
		panel_1.add(lblName);

		textFieldUserName = new JTextField();
		textFieldUserName.setBounds(65, 53, 301, 22);
		panel_1.add(textFieldUserName);
		textFieldUserName.setColumns(10);

		JLabel lblEmail = new JLabel("Email:");
		lblEmail.setBounds(398, 19, 61, 16);
		panel_1.add(lblEmail);

		textFieldUserEmail = new JTextField();
		textFieldUserEmail.setBounds(443, 16, 169, 22);
		panel_1.add(textFieldUserEmail);
		textFieldUserEmail.setColumns(10);

		JLabel lblUserType = new JLabel("User Type:");
		lblUserType.setBounds(390, 59, 79, 16);
		panel_1.add(lblUserType);

		rdbtnOrganizer = new JRadioButton("Organizer");
		rdbtnOrganizer.setBounds(729, 47, 141, 23);
		panel_1.add(rdbtnOrganizer);

		rdbtnReviewer = new JRadioButton("Reviewer");
		rdbtnReviewer.setBounds(729, 72, 141, 23);
		panel_1.add(rdbtnReviewer);

		rdbtnUser = new JRadioButton("User");
		rdbtnUser.setBounds(643, 47, 141, 23);
		panel_1.add(rdbtnUser);

		rdbtnSpeaker = new JRadioButton("Speaker");
		rdbtnSpeaker.setBounds(643, 72, 141, 23);
		panel_1.add(rdbtnSpeaker);

		lblKnowledgeArea = new JLabel("Knowledge area:");
		lblKnowledgeArea.setBounds(385, 124, 102, 16);
		panel_1.add(lblKnowledgeArea);

		textFieldKnowwledgeArea = new JTextField();
		textFieldKnowwledgeArea.setBounds(380, 141, 443, 42);
		panel_1.add(textFieldKnowwledgeArea);
		textFieldKnowwledgeArea.setColumns(10);

		lblBiography = new JLabel("Biography:");
		lblBiography.setBounds(6, 124, 73, 16);
		panel_1.add(lblBiography);

		textFieldBiography = new JTextField();
		textFieldBiography.setBounds(6, 141, 373, 42);
		panel_1.add(textFieldBiography);
		textFieldBiography.setColumns(10);

		JPanel panel_2 = new JPanel();
		panel_2.setBounds(6, 327, 829, 158);
		contentPane.add(panel_2);
		panel_2.setLayout(null);

		scrollPane = new JScrollPane();
		scrollPane.setBounds(6, 6, 817, 146);
		panel_2.add(scrollPane);

		table = new JTable();
		scrollPane.setViewportView(table);

		btnInsert = new JButton("Insert");
		btnInsert.setBounds(16, 297, 117, 29);
		contentPane.add(btnInsert);

		btnRemove = new JButton("Remove");
		btnRemove.setBounds(156, 297, 117, 29);
		contentPane.add(btnRemove);

		btnUpdate = new JButton("Update");
		btnUpdate.setBounds(295, 297, 117, 29);
		contentPane.add(btnUpdate);

		btnSelection = new JButton("Selection");
		btnSelection.setBounds(431, 297, 117, 29);
		contentPane.add(btnSelection);

		btnClean = new JButton("Clean");
		btnClean.setBounds(572, 297, 117, 29);
		contentPane.add(btnClean);

		comboBox = new JComboBox<String>();
		comboBox.setBounds(462, 55, 169, 22);
		panel_1.add(comboBox);

		lblEvent = new JLabel("Event:");
		lblEvent.setBounds(388, 94, 61, 16);
		panel_1.add(lblEvent);

		lblActivity = new JLabel("Activity:");
		lblActivity.setBounds(570, 113, 61, 16);
		panel_1.add(lblActivity);

		comboBoxEvent = new JComboBox();
		comboBoxEvent.setBounds(431, 90, 127, 28);
		panel_1.add(comboBoxEvent);

		comboBoxActivity = new JComboBox();
		comboBoxActivity.setBounds(628, 107, 195, 22);
		panel_1.add(comboBoxActivity);

		group = new ButtonGroup();

		btnBack = new JButton("Back");
		btnBack.setBounds(704, 297, 117, 29);
		contentPane.add(btnBack);

		//PASSO 2
		btnInsert.addActionListener(insertAction);
		btnRemove.addActionListener(removeAction);
		btnUpdate.addActionListener(updateAction);
		btnSelection.addActionListener(selectAction);
		btnClean.addActionListener(cleanAction);
		rdbtnOrganizer.addActionListener(groupRadioButtonAction);
		rdbtnReviewer.addActionListener(groupRadioButtonAction);
		rdbtnSpeaker.addActionListener(groupRadioButtonAction);
		rdbtnUser.addActionListener(groupRadioButtonAction);
		comboBoxEvent.addActionListener(selectComboEventAction);
		btnBack.addActionListener(backAction);








		lblBiography.setEnabled(false);
		textFieldBiography.setEditable(false);
		lblKnowledgeArea.setEnabled(false);
		textFieldKnowwledgeArea.setEditable(false);
		lblEvent.setEnabled(false);
		lblEvent.setEnabled(false);
		lblActivity.setEnabled(false);
		comboBoxEvent.setEnabled(false);
		comboBoxActivity.setEnabled(false);
		
		lblFiliation = new JLabel("Filiation:");
		lblFiliation.setBounds(624, 19, 61, 16);
		panel_1.add(lblFiliation);
		
		textFieldFiliation = new JTextField();
		textFieldFiliation.setBounds(689, 13, 134, 28);
		panel_1.add(textFieldFiliation);
		textFieldFiliation.setColumns(10);



		carregarAllComboBox();
		carregarRadioButtonsGroup();
		populateJTable();

	}
	private class BackButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			dispose();
			UserManagementScreenP.instanceUserManagementScreenP = null;
			
		}
	}
	
	private class InsertButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			User user = null;
			
			int idUser =Integer.valueOf(textFieldUserId.getText());
			String password = textFieldPassword.getText();
			String nameUser = textFieldUserName.getText();
			String email = textFieldUserEmail.getText();
			String typeUser = comboBox.getSelectedItem().toString();
			String filiation = textFieldFiliation.getText();
			
			
			if (idUser == 0 || password.equals("") || nameUser.equals("")
					|| email.equals("") || filiation.equals("")) {
				JOptionPane.showMessageDialog(getContentPane(),
						"Não pode haver campo vazio.", "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				return;
			}else{
				user = new User();
				user.setIdUser(idUser);
				user.setPassword(password);
				user.setTypeUser(TypeUser.valueOf(typeUser));
				user.setNameUser(nameUser);
				user.setEmail(email);
				user.setFiliation(filiation);
				
				if(rdbtnUser.isSelected() == true && rdbtnSpeaker.isSelected() == false && rdbtnReviewer.isSelected() == false && rdbtnOrganizer.isSelected() == false){		
					try {
						UserTableModel model = new UserTableModel(RiSEEventMainScreenP.getFacade().getUsers());	
						model.addUser(user);
						table.setModel(model);
					} catch (RepositoryException e1) {
						JOptionPane.showMessageDialog(getContentPane(),
								e1.toString(), "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						e1.printStackTrace();
					}
				}
				
				try {
					RiSEEventMainScreenP.getFacade().insertUser(user);
				} catch (UserAlreadyInsertedException e2) {
					JOptionPane.showMessageDialog(getContentPane(),
							e2.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e2.printStackTrace();
				} catch (RepositoryException e2) {
					JOptionPane.showMessageDialog(getContentPane(),
							e2.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e2.printStackTrace();
				}

				
				if(rdbtnSpeaker.isSelected() == true){
					if (textFieldBiography.getText().equals("")) {
						JOptionPane.showMessageDialog(getContentPane(),
								"Preencha o campo Biografia.", "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						return;
					}else{
						String biography = textFieldBiography.getText();
						Speaker speaker = new Speaker();
						speaker.setIdUser(idUser);
						speaker.setPassword(password);
						speaker.setTypeUser(TypeUser.valueOf(typeUser));
						speaker.setNameUser(nameUser);
						speaker.setEmail(email);
						speaker.setFiliation(filiation);
						speaker.setBiography(biography);
						
						try {
							SpeakerTableModel model = new SpeakerTableModel(RiSEEventMainScreenP.getFacade().getSpeakers());
							RiSEEventMainScreenP.getFacade().insertSpeaker(speaker);
							model.addSpeaker(speaker);
							table.setModel(model);
						} catch (SpeakerAlreadyInsertedException e2) {
							JOptionPane.showMessageDialog(getContentPane(),
									e2.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e2.printStackTrace();
						} catch (RepositoryException e2) {
							JOptionPane.showMessageDialog(getContentPane(),
									e2.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e2.printStackTrace();
						}
					 
					}
				} else if(rdbtnReviewer.isSelected() == true){
					if (textFieldKnowwledgeArea.getText().equals("")) {
						JOptionPane.showMessageDialog(getContentPane(),
								"Preencha o campo Knowledge area.", "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						return;
					}else{
						String knowledgeArea = textFieldKnowwledgeArea.getText();
						Reviewer reviewer = new Reviewer();
						reviewer.setIdUser(idUser);
						reviewer.setPassword(password);
						reviewer.setTypeUser(TypeUser.valueOf(typeUser));
						reviewer.setNameUser(nameUser);
						reviewer.setEmail(email);
						reviewer.setFiliation(filiation);
						reviewer.setKnowledgeArea(knowledgeArea);
						
						try { 
							ReviewerTableModel model = new ReviewerTableModel(RiSEEventMainScreenP.getFacade().getReviewers());
							RiSEEventMainScreenP.getFacade().insertReviewer(reviewer);
							model.addReviewer(reviewer);
							table.setModel(model);
						} catch (RepositoryException e2) {
							JOptionPane.showMessageDialog(getContentPane(),
									e2.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e2.printStackTrace();
						} catch (ReviewerAlreadyInsertedException e1) {
							JOptionPane.showMessageDialog(getContentPane(),
									e1.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e1.printStackTrace();
						}
					 
					}
				} else if(rdbtnOrganizer.isSelected() == true){
					
					try {
					int idActivity = RiSEEventMainScreenP.getFacade().getActivityIdByName(comboBoxActivity.getSelectedItem().toString());
					
					
					Organizer organizer = new Organizer();
					organizer.setIdActivity(idActivity); 
					organizer.setIdUser(idUser);
					organizer.setPassword(password);
					organizer.setTypeUser(TypeUser.valueOf(typeUser));
					organizer.setNameUser(nameUser);
					organizer.setEmail(email);
					organizer.setFiliation(filiation);
					 
					RiSEEventMainScreenP.getFacade().insertOrganizer(organizer);
						OrganizerTableModel model = new OrganizerTableModel(RiSEEventMainScreenP.getFacade().getOrganizers());
						  
						//model.addOrganizer(organizer);
						table.setModel(model);
					} catch (RepositoryException e2) {
						JOptionPane.showMessageDialog(getContentPane(),
								e2.toString(), "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						e2.printStackTrace();
					} catch (OrganizerAlreadyInsertedException e1) {
						JOptionPane.showMessageDialog(getContentPane(),
								e1.toString(), "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						e1.printStackTrace();
					}
					 
					
				}
				
			}
		}	
	}
	
	private class RemoveButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			int rowIndex = table.getSelectedRow();
			
			if(rowIndex == -1){
				JOptionPane.showMessageDialog(getContentPane(),
						"Selecione o Usuario a ser removido!");
				return;
			}
			
			User user;
			Organizer organizer;
			Reviewer reviewer;
			Speaker speaker;
			try {
				if(rdbtnUser.isSelected() == true){
					user = new UserTableModel(RiSEEventMainScreenP.getFacade().getUsers()).get(rowIndex);
					RiSEEventMainScreenP.getFacade().removeUser(user.getIdUser());
					UserTableModel model = (UserTableModel) table.getModel();
					model.removeUser(rowIndex);
					table.setModel(model);	
				}
				if(rdbtnOrganizer.isSelected() == true){
					organizer = new OrganizerTableModel(RiSEEventMainScreenP.getFacade().getOrganizers()).get(rowIndex);
					RiSEEventMainScreenP.getFacade().removeOrganizer(organizer.getIdUser());
					RiSEEventMainScreenP.getFacade().removeUser(organizer.getIdUser());
					OrganizerTableModel modelOrganizer = (OrganizerTableModel) table.getModel();
					modelOrganizer.removeOrganizer(rowIndex);
					table.setModel(modelOrganizer);
				} else if(rdbtnReviewer.isSelected() == true){
					reviewer = new ReviewerTableModel(RiSEEventMainScreenP.getFacade().getReviewers()).get(rowIndex);
					//System.out.println(reviewer.getIdUser());
					RiSEEventMainScreenP.getFacade().removeReviewer(reviewer.getIdUser());
					RiSEEventMainScreenP.getFacade().removeUser(reviewer.getIdUser());
					ReviewerTableModel modelReviewer = (ReviewerTableModel) table.getModel();
					modelReviewer.removeReviewer(rowIndex);
					table.setModel(modelReviewer);
				} else if(rdbtnSpeaker.isSelected() == true){
					speaker = new SpeakerTableModel(RiSEEventMainScreenP.getFacade().getSpeakers()).get(rowIndex);
					RiSEEventMainScreenP.getFacade().removeSpeaker(speaker.getIdUser());
					RiSEEventMainScreenP.getFacade().removeUser(speaker.getIdUser());
					SpeakerTableModel modelSpeaker = (SpeakerTableModel) table.getModel();
					modelSpeaker.removeSpeaker(rowIndex);
					table.setModel(modelSpeaker);
				}
					
				
				//cleanFields();	
			} catch (RepositoryException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (UserNotFoundException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (UserAlreadyInsertedException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (OrganizerNotFoundException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (OrganizerAlreadyInsertedException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (ReviewerNotFoundException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (ReviewerAlreadyInsertedException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (SpeakerNotFoundException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (SpeakerAlreadyInsertedException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			}
			

		}
	}
	
	private class UpdateButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			String knowledgeArea = "";
			String biography = "";
			
			User userNew = new User();
			Speaker speakerNew = new Speaker();
			Reviewer reviewerNew = new Reviewer();
			
			int userId = Integer.parseInt(textFieldUserId.getText());
			String password = textFieldPassword.getText();
			String nameUser = textFieldUserName.getText();
			String email = textFieldUserEmail.getText();
			String typeUser = comboBox.getSelectedItem().toString();
			String filiation = textFieldFiliation.getText();
	
			if (password.equals("") || nameUser.equals("")
					|| email.equals("") ||  filiation.equals("")) {
				JOptionPane.showMessageDialog(getContentPane(),
						"Não pode haver campo vazio.", "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				return;
			}else{
				
					userNew.setIdUser(userId);
					userNew.setNameUser(nameUser);
					userNew.setPassword(password);
					userNew.setEmail(email);
					userNew.setTypeUser(TypeUser.valueOf(typeUser));
					userNew.setFiliation(filiation);
					
					try {
						RiSEEventMainScreenP.getFacade().updateUser(userNew);
						UserTableModel model;
						model = new UserTableModel(RiSEEventMainScreenP.getFacade().getUsers());
						table.setModel(model);
					} catch (UserNotFoundException e1) {
						JOptionPane
						.showMessageDialog(
								getContentPane(),
								"Usuario que está tentando alterar não existe!",
								"Usuario Inexistente",
								JOptionPane.ERROR_MESSAGE);
					} catch (RepositoryException e1) {
						JOptionPane.showMessageDialog(getContentPane(),
								e1.toString(), "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						e1.printStackTrace();
					} catch (UserAlreadyInsertedException e1) {
						JOptionPane.showMessageDialog(getContentPane(),
								e1.toString(), "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						e1.printStackTrace();
					} 

					if(rdbtnSpeaker.isSelected() == true){
						biography = textFieldBiography.getText();
						speakerNew.setBiography(biography);
						speakerNew.setIdUser(userId);
						try {
							RiSEEventMainScreenP.getFacade().updateSpeaker(speakerNew);
							SpeakerTableModel model;
							model = new SpeakerTableModel(RiSEEventMainScreenP.getFacade().getSpeakers());
							table.setModel(model);
						} catch (SpeakerNotFoundException e2) {
							JOptionPane.showMessageDialog(getContentPane(),
									e2.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e2.printStackTrace();
						} catch (RepositoryException e2) {
							JOptionPane.showMessageDialog(getContentPane(),
									e2.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e2.printStackTrace();
						} catch (SpeakerAlreadyInsertedException e2) {
							JOptionPane.showMessageDialog(getContentPane(),
									e2.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e2.printStackTrace();
						} 
					} else{
						if(rdbtnReviewer.isSelected() == true){
							knowledgeArea = textFieldKnowwledgeArea.getText();
							reviewerNew.setIdUser(userId);
							reviewerNew.setKnowledgeArea(knowledgeArea);
							
							try {
								RiSEEventMainScreenP.getFacade().updateReviewer(reviewerNew);
								ReviewerTableModel model;
								model = new ReviewerTableModel(RiSEEventMainScreenP.getFacade().getReviewers());
								table.setModel(model);
							} catch (ReviewerNotFoundException e1) {
								JOptionPane.showMessageDialog(getContentPane(),
										e1.toString(), "Erro",
										JOptionPane.INFORMATION_MESSAGE);
								e1.printStackTrace();
							} catch (RepositoryException e1) {
								JOptionPane.showMessageDialog(getContentPane(),
										e1.toString(), "Erro",
										JOptionPane.INFORMATION_MESSAGE);
								e1.printStackTrace();
							} catch (ReviewerAlreadyInsertedException e1) {
								JOptionPane.showMessageDialog(getContentPane(),
										e1.toString(), "Erro",
										JOptionPane.INFORMATION_MESSAGE);
								e1.printStackTrace();
							}
						}
					}
	
			}
		}
	}
	
	private class SelectButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {

			int rowIndex = table.getSelectedRow();
			
			User userOld = null;
			Speaker speakerOld = null;
			Reviewer reviewerOld = null;
			Organizer organizerOld = null;
			
			try {
				userOld=  new UserTableModel(RiSEEventMainScreenP.getFacade().getUsers()).get(rowIndex);
		
				textFieldUserId.setText(String.valueOf(userOld.getIdUser()));
				textFieldUserName.setText(userOld.getNameUser());
				textFieldUserEmail.setText(userOld.getEmail());
				textFieldFiliation.setText(userOld.getFiliation());
				comboBox.setSelectedItem(userOld.getTypeUser().toString());
				
				if(RiSEEventMainScreenP.getFacade().isThereOrganizer(userOld.getIdUser()) == true){
					OrganizerTableModel modelOrganizer;
					modelOrganizer = new OrganizerTableModel(RiSEEventMainScreenP.getFacade().getOrganizers());
					tableOrganizer = new JTable();
					scrollPane.setViewportView(tableOrganizer);
					tableOrganizer.setModel(modelOrganizer);
					int rowIndexOrganizers = tableOrganizer.getSelectedRow();
					rdbtnOrganizer.setSelected(true);
					organizerOld = new OrganizerTableModel(RiSEEventMainScreenP.getFacade().getOrganizers()).get(rowIndexOrganizers);
					textFieldUserId.setText(String.valueOf(userOld.getIdUser()));
					textFieldUserName.setText(userOld.getNameUser());
					textFieldUserEmail.setText(userOld.getEmail());
					textFieldFiliation.setText(userOld.getFiliation());
					comboBox.setSelectedItem(userOld.getTypeUser().toString());
				}else{
					if(RiSEEventMainScreenP.getFacade().isThereReviewer(userOld.getIdUser()) == true){
						rdbtnReviewer.setSelected(true);
						try {
							Reviewer reviewerSearched = RiSEEventMainScreenP.getFacade().searchReviewer(userOld.getIdUser());
							textFieldKnowwledgeArea.setEditable(true);
							textFieldKnowwledgeArea.setText(reviewerSearched.getKnowledgeArea());
							textFieldUserId.setText(String.valueOf(reviewerSearched.getIdUser()));
							textFieldUserName.setText(userOld.getNameUser());
							textFieldUserEmail.setText(userOld.getEmail());
							textFieldFiliation.setText(userOld.getFiliation());
							comboBox.setSelectedItem(userOld.getTypeUser().toString());
							reviewerSearched.setNameUser(userOld.getNameUser());
							reviewerSearched.setPassword(userOld.getPassword());
							reviewerSearched.setEmail(userOld.getEmail());
							reviewerSearched.setFiliation(userOld.getFiliation());
							reviewerSearched.setTypeUser(userOld.getTypeUser());							
							ReviewerTableModel model;
							model = new ReviewerTableModel(RiSEEventMainScreenP.getFacade().getReviewers());
							table.setModel(model);

						} catch (ReviewerNotFoundException e1) {
							JOptionPane.showMessageDialog(getContentPane(),
									e1.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e1.printStackTrace();
						} catch (ReviewerAlreadyInsertedException e1) {
							JOptionPane.showMessageDialog(getContentPane(),
									e1.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e1.printStackTrace();
						}
					}else{
						if(RiSEEventMainScreenP.getFacade().isThereSpeaker(userOld.getIdUser()) == true){
							Speaker speakerSearched;
							rdbtnSpeaker.setSelected(true);
							lblBiography.setEnabled(true);
							try {
								speakerSearched = RiSEEventMainScreenP.getFacade().searchSpeaker(userOld.getIdUser());
								textFieldBiography.setEditable(true);
								textFieldBiography.setText(speakerSearched.getBiography());
								textFieldUserId.setText(String.valueOf(speakerSearched.getIdUser()));
								textFieldUserName.setText(userOld.getNameUser());
								textFieldUserEmail.setText(userOld.getEmail());
								textFieldFiliation.setText(userOld.getFiliation());
								comboBox.setSelectedItem(userOld.getTypeUser().toString());
								speakerSearched.setNameUser(userOld.getNameUser());
								speakerSearched.setPassword(userOld.getPassword());
								speakerSearched.setEmail(userOld.getEmail());
								speakerSearched.setFiliation(userOld.getFiliation());
								speakerSearched.setTypeUser(userOld.getTypeUser());
								//int rowIndexReviewers = RiSEEventMainScreenP.facade.getSpeakers().indexOf(speakerSearched);
								SpeakerTableModel model;
								model = new SpeakerTableModel(RiSEEventMainScreenP.getFacade().getSpeakers());
								table.setModel(model);

							} catch (SpeakerNotFoundException e1) {
								JOptionPane.showMessageDialog(getContentPane(),
										e1.toString(), "Erro",
										JOptionPane.INFORMATION_MESSAGE);
								e1.printStackTrace();
							} catch (SpeakerAlreadyInsertedException e1) {
								JOptionPane.showMessageDialog(getContentPane(),
										e1.toString(), "Erro",
										JOptionPane.INFORMATION_MESSAGE);
								e1.printStackTrace();
							}
							
						}
					}
				}
				
				//System.out.println(userOld.getTypeUser());
			} catch (RepositoryException ex) {
				JOptionPane.showMessageDialog(getContentPane(),
						ex.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				ex.printStackTrace();
			}
			
		}
	}
	
	private class CleanButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			
			cleanFields();

		}
	}
	
	private class GroupRadioButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {

			if(rdbtnUser.isSelected() == true){
				lblBiography.setEnabled(false);
				textFieldBiography.setEditable(false);
				lblKnowledgeArea.setEnabled(false);
				textFieldKnowwledgeArea.setEditable(false);
				lblEvent.setEnabled(false);
				lblActivity.setEnabled(false);
				comboBoxEvent.setEnabled(false);
				comboBoxActivity.setEnabled(false);
				try {
					UserTableModel model;
					model = new UserTableModel(RiSEEventMainScreenP.getFacade().getUsers());
					table.setModel(model);
				} catch (RepositoryException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				}
			}else{
				if(rdbtnOrganizer.isSelected() == true){
					lblBiography.setEnabled(false);
					textFieldBiography.setEditable(false);
					lblKnowledgeArea.setEnabled(false);
					textFieldKnowwledgeArea.setEditable(false);
					lblEvent.setEnabled(true);
					lblActivity.setEnabled(true);
					comboBoxEvent.setEnabled(true);
					comboBoxActivity.setEnabled(true);
					try {
						OrganizerTableModel model;
						model = new OrganizerTableModel(RiSEEventMainScreenP.getFacade().getOrganizers());
						table.setModel(model);
					} catch (RepositoryException e1) {
						JOptionPane.showMessageDialog(getContentPane(),
								e1.toString(), "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						e1.printStackTrace();
					}
				}else{
					if(rdbtnReviewer.isSelected() == true){
						lblBiography.setEnabled(false);
						textFieldBiography.setEditable(false);
						lblKnowledgeArea.setEnabled(true);
						textFieldKnowwledgeArea.setEditable(true);
						lblEvent.setEnabled(false);
						lblActivity.setEnabled(false);
						comboBoxEvent.setEnabled(false);
						comboBoxActivity.setEnabled(false);
						try {						
							ReviewerTableModel model;
							model = new ReviewerTableModel(RiSEEventMainScreenP.facade.getReviewers());
							table.setModel(model);
						} catch (RepositoryException e1) {
							JOptionPane.showMessageDialog(getContentPane(),
									e1.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e1.printStackTrace();
						}
					}else{
						if(rdbtnSpeaker.isSelected() == true){
							lblBiography.setEnabled(true);
							textFieldBiography.setEditable(true);
							lblKnowledgeArea.setEnabled(false);
							textFieldKnowwledgeArea.setEditable(false);
							lblEvent.setEnabled(false);
							lblActivity.setEnabled(false);
							comboBoxEvent.setEnabled(false);
							comboBoxActivity.setEnabled(false);
							try {
								SpeakerTableModel model;
								model = new SpeakerTableModel(RiSEEventMainScreenP.getFacade().getSpeakers());
								table.setModel(model);
							} catch (RepositoryException e1) {
								JOptionPane.showMessageDialog(getContentPane(),
										e1.toString(), "Erro",
										JOptionPane.INFORMATION_MESSAGE);
								e1.printStackTrace();
							}
						}
					}
				}
			}
		}
	}

	
	private class SelectComboEventAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			
			try {
				// buscando atividade com base no nome
				List<Activity> activities;
				List<String> nameActivities = new ArrayList<String>();
				activities = RiSEEventMainScreenP.getFacade().getActivitiesByEvent(RiSEEventMainScreenP.getFacade().getEventIdByName(comboBoxEvent.getSelectedItem().toString()));
				comboBoxActivity.removeAllItems();
				//Passando de lista de atividades para lista de nome de atividades
				Iterator<Activity> iteratorActivity = activities.iterator();
				while(iteratorActivity.hasNext()){
					nameActivities.add(iteratorActivity.next().getNameActivity());
				}
				//CarregarCombobox activities	
				Iterator<String> iterator = nameActivities.iterator();
				while(iterator.hasNext()){
					comboBoxActivity.addItem(iterator.next());
				}
			} catch (RepositoryException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			}
			
		}
	}
	
	private void carregarRadioButtonsGroup(){
		
		group.add(rdbtnUser);
		group.add(rdbtnOrganizer);
		group.add(rdbtnReviewer);
		group.add(rdbtnSpeaker);
		
		rdbtnUser.setSelected(true);

	}
	
	private void carregarAllComboBox(){
		TypeUser[] types = TypeUser.values();
		List<String> names = new ArrayList<String>();
		for(int i=0; i<types.length; i++){
			names.add(i, types[i].name());
			comboBox.addItem(types[i].name());
		}
		//Carregando combobox de eventos para organizers
		try {
			List<Event> list = RiSEEventMainScreenP.getFacade().getEvents();
			Iterator<Event> iterator = list.iterator();
			while(iterator.hasNext()){
				comboBoxEvent.addItem(iterator.next().getEventName());
			}
		} catch (RepositoryException e5) {
			JOptionPane.showMessageDialog(getContentPane(),
					e5.toString(), "Erro",
					JOptionPane.INFORMATION_MESSAGE);
			e5.printStackTrace();
		}
		
	}
	
	private void populateJTable(){
		try {
			UserTableModel model;
			model = new UserTableModel(RiSEEventMainScreenP.getFacade().getUsers());
			table.setModel(model);
		} catch (RepositoryException e) {
			JOptionPane.showMessageDialog(getContentPane(),
					e.toString(), "Erro",
					JOptionPane.INFORMATION_MESSAGE);
			e.printStackTrace();
		}
	}
	
	private void cleanFields(){
		textFieldUserId.setText("");
		textFieldUserName.setText("");
		textFieldUserEmail.setText("");
		textFieldPassword.setText("");
		textFieldFiliation.setText("");
	}
}
//#endif
